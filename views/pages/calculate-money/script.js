document.getElementById('calculatorForm').addEventListener('submit', function (e) {
    e.preventDefault();
    calculateRefund();
});

function calculateRefund() {
    // Hide previous errors and results
    document.getElementById('errorMessage').classList.add('hidden');
    document.getElementById('calculationDetails').classList.add('hidden');

    // Get form values
    const failureDate = new Date(document.getElementById('failureDate').value);
    const expiryDate = new Date(document.getElementById('expiryDate').value);
    const months = parseInt(document.getElementById('months').value);
    const price = parseFloat(document.getElementById('price').value);
    const deductPercent = parseFloat(document.getElementById('deductPercent').value) || 0;

    // Validation
    if (isNaN(failureDate.getTime()) || isNaN(expiryDate.getTime()) || isNaN(months) || isNaN(price)) {
        showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        return;
    }

    if (failureDate >= expiryDate) {
        showError('‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
        return;
    }

    if (months <= 0 || price <= 0) {
        showError('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
        return;
    }

    if (deductPercent < 0 || deductPercent > 100) {
        showError('‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100');
        return;
    }

    // Calculate total days and remaining days
    const totalDays = Math.ceil((expiryDate - new Date(expiryDate.getFullYear(), expiryDate.getMonth() - months, expiryDate.getDate())) / (1000 * 60 * 60 * 24));
    const usedDays = Math.ceil((failureDate - new Date(expiryDate.getFullYear(), expiryDate.getMonth() - months, expiryDate.getDate())) / (1000 * 60 * 60 * 24));
    const remainingDays = totalDays - usedDays;

    if (remainingDays <= 0) {
        showError('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        return;
    }

    // Calculate refund
    const dailyRate = price / totalDays;
    const refundBeforeDeduction = remainingDays * dailyRate;
    const deductionAmount = refundBeforeDeduction * (deductPercent / 100);
    const finalRefund = refundBeforeDeduction - deductionAmount;

    // Display results
    document.getElementById('resultPlaceholder').classList.add('hidden');
    document.getElementById('results').classList.remove('hidden');

    document.getElementById('remainingDays').textContent = remainingDays + ' ‡∏ß‡∏±‡∏ô';
    document.getElementById('refundBefore').textContent = '‡∏ø' + refundBeforeDeduction.toFixed(2);
    document.getElementById('refundAfter').textContent = '‡∏ø' + finalRefund.toFixed(2);

    // Show calculation details
    const calcDetails = document.getElementById('refundCalc');
    calcDetails.innerHTML = `
                <div class="space-y-2">
                    <p><strong>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:</strong></p>
                    <p>‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalDays} ‡∏ß‡∏±‡∏ô</p>
                    <p>‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${usedDays} ‡∏ß‡∏±‡∏ô</p>
                    <p>‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remainingDays} ‡∏ß‡∏±‡∏ô</p>
                    <p>‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: ‡∏ø${dailyRate.toFixed(2)}</p>
                    <br>
                    <p><strong>üí∞ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô:</strong></p>
                    <p>‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏Å: ${remainingDays} ‡∏ß‡∏±‡∏ô √ó ‡∏ø${dailyRate.toFixed(2)} = ‡∏ø${refundBeforeDeduction.toFixed(2)}</p>
                    ${deductPercent > 0 ? `<p>‚Ä¢ ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô ${deductPercent}%: ‡∏ø${deductionAmount.toFixed(2)}</p>` : ''}
                    <p class="font-bold text-green-600">‚Ä¢ <strong>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏∑‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ‡∏ø${finalRefund.toFixed(2)}</strong></p>
                </div>
            `;

    document.getElementById('calculationDetails').classList.remove('hidden');

    // Add animation
    document.getElementById('results').classList.add('animate__animated', 'animate__fadeInUp');
}

function showError(message) {
    document.getElementById('errorText').textContent = message;
    document.getElementById('errorMessage').classList.remove('hidden');
    document.getElementById('results').classList.remove('hidden');
    document.getElementById('resultPlaceholder').classList.add('hidden');
}

// Auto-calculate on input change
const inputs = document.querySelectorAll('#calculatorForm input');
inputs.forEach(input => {
    input.addEventListener('input', function () {
        // Optional: Auto-calculate when all fields are filled
        const form = document.getElementById('calculatorForm');
        const formData = new FormData(form);
        let allFilled = true;

        inputs.forEach(inp => {
            if (inp.required && !inp.value) {
                allFilled = false;
            }
        });

        if (allFilled) {
            // calculateRefund(); // Uncomment for auto-calculation
        }
    });
});

// Add Thai date formatting helper
function formatThaiDate(date) {
    const thaiMonths = [
        '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
        '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];

    return `${date.getDate()} ${thaiMonths[date.getMonth()]} ${date.getFullYear() + 543}`;
}